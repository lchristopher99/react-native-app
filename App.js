import React from 'react';
import { StyleSheet, Text, View } from 'react-native';
import { Button } from 'react-native-elements';
// Following imports are dependent files for project
// Each one adds elements/constants/components/data etc...
import FetchLocationBtn from './components/FetchLocation';
import UsersMap from './components/UsersMap';
import { getLocationIsPressed } from './components/FetchOthersLocation';

// fetchLocation is the default exported class for this file
export default class App extends React.Component {
  // Initial state is set to null so as to assign data to it later via. userLocation coords generated by 
  // navigator.geolocation.getCurrentPosition.
  state = {
    getLocationPressed: null,
    userLocation: null,
    otherUsersLocations: [] // array created to store other user locations: see below.
  }
  // Following functional component is a handler passed to prop: this.getUserLocationHandler
  // Function is made to grab the simulated user position,
  // (simulated due to coords being passed to ios simulator itself rather than relying on actual gps)
  // using navigator.geolocation.getCurrentPosition => this data is then passed to a name: position
  getUserLocationHandler = () => {
    navigator.geolocation.getCurrentPosition(position => {
      // For debugging...logs coords on remote console
      // console.log(position),

      // following setState assigns changing data (ie. position.coords.latitude, position.coords.longitude) to a prop/name 
      // (ie. latitude, longitude) which is then contained within a parent object: userLocation.
      this.setState({
        userLocation: {
          // following are obtained from a coords object generated by navigator.geolocation.getCurrentPosition.
          // Coords object can be seen if console.log is uncommented.
          latitude: position.coords.latitude,
          longitude: position.coords.longitude,
          // deltas are created to create a 'region' for the user to view around the x, y coords above.
          latitudeDelta: 0.0622,
          longitudeDelta: 0.0421
        },
        getLocationPressed: {
          isPressed: true
        }
      });

      // Standard fetch api that sends coords to google firebase (backend).
      // Fetches url as first argument and uses a POST method within the second argument object.
      // POST method posts the body of the 2nd arg obj as a JSON string, as indicated by JSON.stringify
      // position lat and long coords are then turned into a JSON string and posted on the firebase backend
      fetch('https://testapp-206216.firebaseio.com/places.json', {
        method: 'POST',
        body: JSON.stringify({
          latitude: position.coords.latitude,
          longitude: position.coords.longitude,
        })
      })
      .then(res => console.log(res)) // then call logs response from backend onto console
      .catch(err => console.log(err)); // catch call logs console error if network connection failure is present
      
    }), err => console.log(err); // console error is created so as to notify if network type error is present

    this.getLocationIsPressed();
  }

  getLocationIsPressed = () => {
    let getOtherLocationBtn;
  
    if (this.state.getLocationPressed) {
      console.log('there we go!') // I LEFT OFF HERE
    }
  }

  // other users handler then runs the fetch api, parses the data received from the api, adds that new data (lat, long, key) to the array: 
  // otherUsersLocations (declared above in state), and then sets the new state of the otherUsersLocations prop (which was originally an empty array)
  // equal to the length of the newly returned string. 
  otherUsersHandler = () => {
      // Standard fetch api that receives coords from google firebase (backend). See above api logic.
      fetch('https://testapp-206216.firebaseio.com/places.json')
      .then(res => res.json()) // then call takes data fetched from above url and logs it into a json unparsed response
      .then(parsedRes => { // json is then parsed by then call and is logged onto console as js object
        const otherUsersLocationsArray = []; // Array has been created to store location and key/id of other user locations
        for (const key in parsedRes) { // for in loop then takes each parsed response (lat, long, key) and adds it to the the array, which then returns the length of the new array
          otherUsersLocationsArray.push({
            latitude: parsedRes[key].latitude,
            longitude: parsedRes[key].longitude,
            id: key
          });
        }
        this.setState({ // new setState is created to set the new state of other users locations to the newly created array with data populated w/n said array
          otherUsersLocations: otherUsersLocationsArray
        });
      })
      .catch(err => console.log(err)); // catch call logs console error if network connection failure is present
  }

  // The following return statement is what is returned by the default class for the page: App.
  render() {
    return (
      <View style={styles.container}>
        {/* Below is a props functional component located in UsersMap.js that returns a react-native-maps MapView element which has been 
        renamed by the function as UsersMap */}
        <UsersMap 
        userLocation={this.state.userLocation} 
        otherUsersLocations={this.state.otherUsersLocations} // the prop: otherUsersLocations, is then rendered using the newly added data from this.state.otherUsersLocations (which was updated by setState)
        /> {/* This ^^^ originally displayed nothing because the array was empty to being with...same concept applies to userLocation, nothing was displayed because it originally was equal to null */}
        {/* Continue this ^^^ in UsersMap.js > const otherUsersMarkers */}

        {/* Below is a props functional component located in fetchLocation.js that returns a react-native-elements button which has been 
        renamed by the function as FetchLocationBtn */}
        <FetchLocationBtn
          // following prop: onGetLocation is declared by button element in FetchLocation.js
          // below prop is passed handler: this.getUserLocationHandler - located above
          onGetLocation={this.getUserLocationHandler} 
        />
      </View>
    );
  }
}

const styles = StyleSheet.create({
  container: {
    backgroundColor: '#fff',
    alignItems: 'center',
    justifyContent: 'center',
  },
});
